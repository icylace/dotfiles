-- https://typeclasses.com/ghci/config
-- https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html
-- https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
-- https://gist.github.com/Pitometsu/0b0d04706e671172ed3b78309b14b43d
-- https://gist.github.com/ChShersh/9111d97578413323ba1b191299c54235

-- Options apparently get processed in this order:
--   1. A config.yaml.
--   2. A project's stack.yaml.
--   3. `--ghc-options` when running `stack ghci` on the command line.
--   4. `.ghci` settings (this file).

-- -----------------------------------------------------------------------------
--  Setup pretty-printing of `Show` instances.
-- -----------------------------------------------------------------------------

-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html?highlight=interactive-print#ghc-flag--interactive-print%20⟨expr⟩
-- https://teh.id.au/posts/2017/02/13/interactive-print/
-- https://github.com/thumphries/dotfiles/blob/b4011c8305409e3b1f8aab547895f3a22c8f7ec2/ghc/.ghc/ghci.conf

-- -----------------------------------------------------------------------------

-- Expose some packages so we can use them here without requiring them be listed
-- as dependencies in the "package.yaml" file for every project.

-- hscolour
-- hscolour is a small Haskell script to colourise Haskell code.
-- http://hackage.haskell.org/package/hscolour
:set -package hscolour

-- -- prettyprinter
-- -- A modern, extensible and well-documented prettyprinter.
-- -- https://github.com/quchen/prettyprinter
-- -- http://hackage.haskell.org/package/prettyprinter
-- :set -package prettyprinter

-- -- pretty-show
-- -- Tools for working with derived `Show` instances and generic
-- -- inspection of values.
-- -- https://github.com/yav/pretty-show
-- -- http://hackage.haskell.org/package/pretty-show
-- :set -package pretty-show

-- -----------------------------------------------------------------------------

import           Language.Haskell.HsColour           (Output(TTYg), hscolour)
import           Language.Haskell.HsColour.Colourise (Colour(Rgb, White), ColourPrefs, Highlight(Foreground))
import qualified Language.Haskell.HsColour.Colourise as HC
import           Language.Haskell.HsColour.Output    (TerminalType(XTerm256Compatible))
import           Text.Show.Pretty                    (ppShow)

:{

colorBrightTurquoise82 = Rgb 163 255 235
colorCuriousBlue43     = Rgb 39 115 178
colorCuriousBlue48     = Rgb 44 130 201
colorCuriousBlue56     = Rgb 71 150 215
colorKimberly34        = Rgb 70 70 104
colorMojo67            = Rgb 214 126 130
colorRose61            = Rgb 255 56 165
colorShamrock59        = Rgb 86 216 188

-- http://hackage.haskell.org/package/hscolour-1.24.4/docs/src/Language-Haskell-HsColour-Classify.html
palette :: ColourPrefs
palette = HC.defaultColourPrefs
  { HC.char             = [Foreground colorBrightTurquoise82]    -- Character.
  , HC.comment          = [Foreground colorKimberly34]           -- Comment.
  , HC.conid            = [Foreground colorCuriousBlue56]        -- Constructor.
  , HC.conop            = [Foreground colorCuriousBlue56]        -- Cons operator.
  , HC.cpp              = [Foreground colorCuriousBlue56]        -- Leading hash tag.
  , HC.definition       = [Foreground White]                     -- ???
  , HC.keyglyph         = [Foreground colorCuriousBlue43]        -- Built-in symbol.
  , HC.keyword          = [Foreground colorCuriousBlue43]        -- Built-in keyword.
  , HC.layout           = [Foreground colorCuriousBlue48]        -- Grouping character.
  , HC.number           = [Foreground colorRose61]               -- Number.
  , HC.selection        = [Foreground White]                     -- ???
  , HC.string           = [Foreground colorShamrock59]           -- String.
  , HC.variantselection = [Foreground White]                     -- ???
  , HC.varid            = [Foreground colorMojo67]               -- Variable or function.
  , HC.varop            = [Foreground colorMojo67]               -- Operator or inlined function.
  }

prettyPrint :: Show a => a -> IO ()
prettyPrint = putStrLn . hscolour (TTYg XTerm256Compatible) palette False False "" False . ppShow

:}

-- -- Once we make use of the pretty-printing-related modules we can remove from
-- -- them from the scope of the prompt without losing their effect.
-- :m -Language.Haskell.HsColour
-- :m -Language.Haskell.HsColour.Colourise
-- :m -Language.Haskell.HsColour.Output
-- :m -Text.Show.Pretty

:def pretty \_ -> pure ":set -interactive-print prettyPrint"
:def no-pretty \_ -> pure ":set -interactive-print System.IO.print"

-- Show pretty printed output by default.
:pretty

-- -----------------------------------------------------------------------------
--  Setup a custom prompt.
-- -----------------------------------------------------------------------------

:{

ansi :: String -> String
ansi code = "\ESC[" <> code <> "m"

sgrFG24Bit :: String
sgrFG24Bit = "38;2"

fgColor :: Int -> Int -> Int -> String
fgColor r g b = ansi $ concat $ Data.List.intersperse ";" [sgrFG24Bit, show r, show g, show b]

colorAvocado49     = fgColor 150 150 100
colorGray39        = fgColor 100 100 100
colorRose71        = fgColor 255 105 180
colorFuchsiaBlue55 = fgColor 160 80 200
reset              = ansi ""

etch :: String -> String -> String
etch color x = color <> x <> reset

showThem :: [String] -> String
showThem = foldr1 $ \x acc -> x <> " " <> acc

showOneOf :: [Char] -> Int -> [Char]
showOneOf xs n = [xs !! mod n (length xs)] <> "  "

prompt :: [String] -> Int -> String
prompt xs n = "\n"
  <> etch colorAvocado49 (show n) <> " "
  <> etch colorGray39 (showThem xs) <> "\n"
  <> etch colorRose71 (showOneOf "λ𝞴ᴧ𝚲𝛌𝛬Λ𝜆𝜦𝝀𝝠𝝺ƛ𝞚" n)

continuationPrompt :: [String] -> Int -> String
continuationPrompt _ n = etch colorFuchsiaBlue55 $ showOneOf "⋮⁞┆┇┋┊" n

(.:) :: (a -> b) -> (c -> d -> a) -> c -> d -> b
(.:) = (.) . (.)

:}

:set prompt-function pure .: prompt
:set prompt-cont-function pure .: continuationPrompt

-- -----------------------------------------------------------------------------
--  Setup the ability to search Hoogle.
-- -----------------------------------------------------------------------------

hoogle = pure . (<>) ":! stack hoogle -- "
hoogleInfo = pure . (<>) ":! stack hoogle -- --info "

:def hoogle hoogle
:def hoogle-info hoogleInfo

:def ho hoogle
:def hoi hoogleInfo

-- -----------------------------------------------------------------------------

-- `-fforce-recomp`: Ensures everything gets recomplied.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/separate_compilation.html?highlight=force-recomp#ghc-flag--fforce-recomp

-- `:reload`: Reloads the current set of modules.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html?highlight=reload#ghci-cmd-:reload

:def rr \_ -> pure ":set -fforce-recomp\n:reload\n:set -fno-force-recomp"

-- -----------------------------------------------------------------------------

-- `-fdiagnostics-show-caret`: Shows the line of code of a detected error.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html?highlight=diagnostics-show-caret#ghc-flag--fdiagnostics-show-caret
:def caret \_ -> pure ":set -fdiagnostics-show-caret"
:def no-caret \_ -> pure ":set -fno-diagnostics-show-caret"

-- -----------------------------------------------------------------------------

-- Show character ranges for errors.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/flags.html#ghc-flag--ferror-spans
:set -ferror-spans

-- Full file paths are usually too much clutter.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html#ghc-flag--fhide-source-paths
:set -fhide-source-paths

-- Show type synonym expansions in error messages.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html#ghc-flag--fprint-expanded-synonyms
:set -fprint-expanded-synonyms

-- Collect type and location information after loading modules.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:set%20+c
:set +c

-- Enable detection and handling of multiline expressions.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:set%20+m
:set +m

-- Show types of evaluated expressions.
-- https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:set%20+t
:set +t
